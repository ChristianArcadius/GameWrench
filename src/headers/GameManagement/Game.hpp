#pragma once

#include "GameMap.hpp"
#include "Collider.hpp"

namespace gw {

/// The class resonpsible for running the game.
/// Manages the game window, updating game state, and displaying each frame.
class Game
{
public:

////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////////////////////////

    Game(GameMap& map, Vector2u resolution = Vector2u(800, 800), std::string name = "GameWrench");

    Game(GameMap& map, int resolutionX = 800, int resolutionY = 800,
        std::string name = "GameWrench");

    virtual ~Game() = default;

////////////////////////////////////////////////////////////////////////////////////////////////////
// Mutators
////////////////////////////////////////////////////////////////////////////////////////////////////

    void addCollider(Collider& collider);
    void outputFrame();

////////////////////////////////////////////////////////////////////////////////////////////////////
// Accessors
////////////////////////////////////////////////////////////////////////////////////////////////////

    bool isPlaying() const { return running; }
    float elapsedTime() const { return totalTime; }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Public Members
////////////////////////////////////////////////////////////////////////////////////////////////////

    GameMap& map;   // Map of the video game

private:

////////////////////////////////////////////////////////////////////////////////////////////////////
// Private Methods
////////////////////////////////////////////////////////////////////////////////////////////////////

    void updateSprites(std::vector<AnimatedSprite*> sprites);
    void updateGameState();
    void draw(std::vector<Sprite*> sprites);
    void draw(std::vector<AnimatedSprite*> sprites);
    void drawAll();

////////////////////////////////////////////////////////////////////////////////////////////////////
// Private Members
////////////////////////////////////////////////////////////////////////////////////////////////////
    
    sf::RenderWindow window;            // App window that displays the game
    sf::Clock clock;                    // Timer used to get deltaTime
    float deltaTime;                    // The time between the previous two frames
    float totalTime;                    // Total in-game seconds since first frame output
    bool running;                       // Has the game been paused or closed
    std::vector<Collider*> colliders;   // Collision detection and resolution
};

} // namespace gw